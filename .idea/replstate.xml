<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1454493910532">{:repl-history {:ide [], :local [&quot;(time-formatter \&quot;2016-01-24T05:26:08.357Z\&quot;)&quot; &quot;(.strptime js/datetime \&quot;2012-11-14 14:32:30\&quot; \&quot;%Y-%m-%d % H:%M:%S\&quot;)&quot; &quot;(.generate js/c3\n             (clj-&gt;js\n               {:bindto \&quot;#minute-chart\&quot;\n                :data {:x       \&quot;x\&quot;\n                       :type    \&quot;spline\&quot;\n                     :xFormat \&quot;%Y-%m-%dT%H:%M:%S\&quot;\n                     :columns [[\&quot;x\&quot; \&quot;2016-01-28T00:01:08\&quot; \&quot;2016-01-28T00:02:08\&quot; \&quot;2016-01-28T00:03:08\&quot; \&quot;2016-01-28T00:04:08\&quot;]\n                               [\&quot;data1\&quot; 30 200 100 400 ]\n                               [\&quot;data2\&quot; 130 340 200 500 ]]}\n              :axis {:x {:type \&quot;timeseries\&quot;\n                         :tick {:format \&quot;%M:%S\&quot;}}}}))&quot; &quot;(.generate js/c3\n             (clj-&gt;js\n               {:bindto \&quot;#minute-chart\&quot;\n                :data {:x       \&quot;x\&quot;\n                       :type    \&quot;spline\&quot;\n                     :xFormat \&quot;%Y-%m-%dT%H:%M:%S\&quot;\n                     :columns [\n                               [\&quot;data1\&quot; 30 200 100 400 ]\n                               [\&quot;data2\&quot; 130 340 200 500 ]\n                               [\&quot;x\&quot; \&quot;2016-01-28T00:01:08\&quot; \&quot;2016-01-28T00:02:08\&quot; \&quot;2016-01-28T00:03:08\&quot; \&quot;2016-01-28T00:04:08\&quot;]]}\n              :axis {:x {:type \&quot;timeseries\&quot;\n                         :tick {:format \&quot;%M:%S\&quot;}}}}))&quot; &quot;(let [v (cljs.core/atom (.generate js/c3\n                                   (clj-&gt;js\n                                     {:bindto \&quot;#minute-chart\&quot;\n                                      :data {:x       \&quot;x\&quot;\n                                             :type    \&quot;spline\&quot;\n                                             :xFormat \&quot;%Y-%m-%dT%H:%M:%S\&quot;\n                                             :columns [[\&quot;data1\&quot; 30 200 100 400 ]\n                                                       [\&quot;data2\&quot; 130 340 200 500 ]\n                                                       [\&quot;x\&quot; \&quot;2016-01-28T00:01:08\&quot; \&quot;2016-01-28T00:02:08\&quot; \&quot;2016-01-28T00:03:08\&quot; \&quot;2016-01-28T00:04:08\&quot;]]}\n                                      :axis {:x {:type \&quot;timeseries\&quot;\n                                                 :tick {:format \&quot;%M:%S\&quot;}}}})))]\n  (js/setTimeout\n    (fn [x] (.load @x {:columns [[\&quot;data1\&quot; 200 100 400 20]\n                                 [\&quot;data2\&quot; 340 200 500 150]\n                                 [\&quot;x\&quot; \&quot;2016-01-28T00:02:08\&quot; \&quot;2016-01-28T00:03:08\&quot; \&quot;2016-01-28T00:04:08\&quot; \&quot;2016-01-28T00:05:08\&quot;]]}\n    1000))))&quot; &quot;(let [v (cljs.core/atom (.generate js/c3\n                                   (clj-&gt;js\n                                     {:bindto \&quot;#minute-chart\&quot;\n                                      :data {:x       \&quot;x\&quot;\n                                             :type    \&quot;spline\&quot;\n                                             :xFormat \&quot;%Y-%m-%dT%H:%M:%S\&quot;\n                                             :columns [[\&quot;data1\&quot; 30 200 100 400 ]\n                                                       [\&quot;data2\&quot; 130 340 200 500 ]\n                                                       [\&quot;x\&quot; \&quot;2016-01-28T00:01:08\&quot; \&quot;2016-01-28T00:02:08\&quot; \&quot;2016-01-28T00:03:08\&quot; \&quot;2016-01-28T00:04:08\&quot;]]}\n                                      :axis {:x {:type \&quot;timeseries\&quot;\n                                                 :tick {:format \&quot;%M:%S\&quot;}}}})))]\n  (js/setTimeout\n    (.load @v {:columns [[\&quot;data1\&quot; 200 100 400 20]\n                         [\&quot;data2\&quot; 340 200 500 150]\n                         [\&quot;x\&quot; \&quot;2016-01-28T00:02:08\&quot; \&quot;2016-01-28T00:03:08\&quot; \&quot;2016-01-28T00:04:08\&quot; \&quot;2016-01-28T00:05:08\&quot;]]}\n           1000)))&quot; &quot;(let [v (cljs.core/atom (.generate js/c3\n                                   (clj-&gt;js\n                                     {:bindto \&quot;#minute-chart\&quot;\n                                      :data {:x       \&quot;x\&quot;\n                                             :type    \&quot;spline\&quot;\n                                             :xFormat \&quot;%Y-%m-%dT%H:%M:%S\&quot;\n                                             :columns [[\&quot;data1\&quot; 30 200 100 400 ]\n                                                       [\&quot;data2\&quot; 130 340 200 500 ]\n                                                       [\&quot;x\&quot; \&quot;2016-01-28T00:01:08\&quot; \&quot;2016-01-28T00:02:08\&quot; \&quot;2016-01-28T00:03:08\&quot; \&quot;2016-01-28T00:04:08\&quot;]]}\n                                      :axis {:x {:type \&quot;timeseries\&quot;\n                                                 :tick {:format \&quot;%M:%S\&quot;}}}})))]\n  (js/setTimeout\n    #(.load @v {:columns [[\&quot;data1\&quot; 200 100 400 20]\n                         [\&quot;data2\&quot; 340 200 500 150]\n                         [\&quot;x\&quot; \&quot;2016-01-28T00:02:08\&quot; \&quot;2016-01-28T00:03:08\&quot; \&quot;2016-01-28T00:04:08\&quot; \&quot;2016-01-28T00:05:08\&quot;]]})\n    1000))&quot; &quot;(let [v (cljs.core/atom (.generate js/c3\n                                   (clj-&gt;js\n                                     {:bindto \&quot;#minute-chart\&quot;\n                                      :data {:x       \&quot;x\&quot;\n                                             :type    \&quot;spline\&quot;\n                                             :xFormat \&quot;%Y-%m-%dT%H:%M:%S\&quot;\n                                             :columns [[\&quot;data1\&quot; 30 200 100 400 ]\n                                                       [\&quot;data2\&quot; 130 340 200 500 ]\n                                                       [\&quot;x\&quot; \&quot;2016-01-28T00:01:08\&quot; \&quot;2016-01-28T00:02:08\&quot; \&quot;2016-01-28T00:03:08\&quot; \&quot;2016-01-28T00:04:08\&quot;]]}\n                                      :axis {:x {:type \&quot;timeseries\&quot;\n                                                 :tick {:format \&quot;%M:%S\&quot;}}}})))]\n  (js/setTimeout\n    #(.load @v {:columns [[\&quot;data1\&quot; 200 100 400 20]\n                         [\&quot;data2\&quot; 340 200 500 150]\n                         [\&quot;x\&quot; \&quot;2016-01-28T00:02:08\&quot; \&quot;2016-01-28T00:03:08\&quot; \&quot;2016-01-28T00:04:08\&quot; \&quot;2016-01-28T00:05:08\&quot;]]})\n    2000))&quot; &quot;(let [v (cljs.core/atom (.generate js/c3\n                                   (clj-&gt;js\n                                     {:bindto \&quot;#minute-chart\&quot;\n                                      :data {:x       \&quot;x\&quot;\n                                             :type    \&quot;spline\&quot;\n                                             :xFormat \&quot;%Y-%m-%dT%H:%M:%S\&quot;\n                                             :columns [[\&quot;data1\&quot; 30 200 100 400 ]\n                                                       [\&quot;data2\&quot; 130 340 200 500 ]\n                                                       [\&quot;x\&quot; \&quot;2016-01-28T00:01:08\&quot; \&quot;2016-01-28T00:02:08\&quot; \&quot;2016-01-28T00:03:08\&quot; \&quot;2016-01-28T00:04:08\&quot;]]}\n                                      :axis {:x {:type \&quot;timeseries\&quot;\n                                                 :tick {:format \&quot;%M:%S\&quot;}}}})))]\n  (js/setTimeout\n    (fn [] (.load @v {:columns [[\&quot;data1\&quot; 200 100 400 20]\n                         [\&quot;data2\&quot; 340 200 500 150]\n                         [\&quot;x\&quot; \&quot;2016-01-28T00:02:08\&quot; \&quot;2016-01-28T00:03:08\&quot; \&quot;2016-01-28T00:04:08\&quot; \&quot;2016-01-28T00:05:08\&quot;]]}))\n    2000))&quot; &quot;(let [v (cljs.core/atom (.generate js/c3\n                                   (clj-&gt;js\n                                     {:bindto \&quot;#minute-chart\&quot;\n                                      :data {:x       \&quot;x\&quot;\n                                             :type    \&quot;spline\&quot;\n                                             :xFormat \&quot;%Y-%m-%dT%H:%M:%S\&quot;\n                                             :columns [[\&quot;data1\&quot; 30 200 100 400 ]\n                                                       [\&quot;data2\&quot; 130 340 200 500 ]\n                                                       [\&quot;x\&quot; \&quot;2016-01-28T00:01:08\&quot; \&quot;2016-01-28T00:02:08\&quot; \&quot;2016-01-28T00:03:08\&quot; \&quot;2016-01-28T00:04:08\&quot;]]}\n                                      :axis {:x {:type \&quot;timeseries\&quot;\n                                                 :tick {:format \&quot;%M:%S\&quot;}}}})))]\n  (js/setTimeout\n    (fn [] (println \&quot;timeout!\&quot;) (.load @v {:columns [[\&quot;data1\&quot; 200 100 400 20]\n                         [\&quot;data2\&quot; 340 200 500 150]\n                         [\&quot;x\&quot; \&quot;2016-01-28T00:02:08\&quot; \&quot;2016-01-28T00:03:08\&quot; \&quot;2016-01-28T00:04:08\&quot; \&quot;2016-01-28T00:05:08\&quot;]]}))\n    2000))&quot; &quot;(let [v (.generate js/c3\n                   (clj-&gt;js\n                     {:bindto \&quot;#minute-chart\&quot;\n                      :data   {:x       \&quot;x\&quot;\n                               :type    \&quot;spline\&quot;\n                               :xFormat \&quot;%Y-%m-%dT%H:%M:%S\&quot;\n                               :columns [[\&quot;data1\&quot; 30 200 100 400]\n                                         [\&quot;data2\&quot; 130 340 200 500]\n                                         [\&quot;x\&quot; \&quot;2016-01-28T00:01:08\&quot; \&quot;2016-01-28T00:02:08\&quot; \&quot;2016-01-28T00:03:08\&quot; \&quot;2016-01-28T00:04:08\&quot;]]}\n                      :axis   {:x {:type \&quot;timeseries\&quot;\n                                   :tick {:format \&quot;%M:%S\&quot;}}}}))]\n  (js/setTimeout\n    (fn [] (.load v {:columns [[\&quot;data1\&quot; 200 100 400 20]\n                         [\&quot;data2\&quot; 340 200 500 150]\n                         [\&quot;x\&quot; \&quot;2016-01-28T00:02:08\&quot; \&quot;2016-01-28T00:03:08\&quot; \&quot;2016-01-28T00:04:08\&quot; \&quot;2016-01-28T00:05:08\&quot;]]}))\n    2000))&quot; &quot;(let [v (cljs.core/atom (.generate js/c3\n                                   (clj-&gt;js\n                                     {:bindto \&quot;#minute-chart\&quot;\n                                      :data {:x       \&quot;x\&quot;\n                                             :type    \&quot;spline\&quot;\n                                             :xFormat \&quot;%Y-%m-%dT%H:%M:%S\&quot;\n                                             :columns [[\&quot;data1\&quot; 30 200 100 400 ]\n                                                       [\&quot;data2\&quot; 130 340 200 500 ]\n                                                       [\&quot;x\&quot; \&quot;2016-01-28T00:01:08\&quot; \&quot;2016-01-28T00:02:08\&quot; \&quot;2016-01-28T00:03:08\&quot; \&quot;2016-01-28T00:04:08\&quot;]]}\n                                      :axis {:x {:type \&quot;timeseries\&quot;\n                                                 :tick {:format \&quot;%M:%S\&quot;}}}})))]\n  (js/setTimeout\n    (fn [] (.load @v (clj-&gt;js\n                       {:columns [[\&quot;data1\&quot; 200 100 400 20]\n                         [\&quot;data2\&quot; 340 200 500 150]\n                         [\&quot;x\&quot; \&quot;2016-01-28T00:02:08\&quot; \&quot;2016-01-28T00:03:08\&quot; \&quot;2016-01-28T00:04:08\&quot; \&quot;2016-01-28T00:05:08\&quot;]]})))\n    2000))&quot; &quot;(pprint @(spline-graph*\n    {:id          \&quot;#minute-chart\&quot;\n     :label       \&quot;volume\&quot;\n     :format      \&quot;%M:%S\&quot;\n     :granularity \&quot;second\&quot;\n     :span        (time/minutes 1)}))&quot; &quot;(println @(spline-graph*\n    {:id          \&quot;#minute-chart\&quot;\n     :label       \&quot;volume\&quot;\n     :format      \&quot;%M:%S\&quot;\n     :granularity \&quot;second\&quot;\n     :span        (time/minutes 1)}))&quot; &quot;(=\n    (select-keys\n      @(spline-graph*\n         {:id          \&quot;#minute-chart\&quot;\n          :label       \&quot;volume\&quot;\n          :format      \&quot;%M:%S\&quot;\n          :granularity \&quot;second\&quot;\n          :span        (time/minutes 1)})\n      [:data :axis :bindto])\n    {:bindto \&quot;#minute-chart\&quot;\n     :data   {:x       \&quot;x\&quot;\n              :type    \&quot;spline\&quot;\n              :xFormat \&quot;%Y-%m-%dT%H:%M:%S\&quot;\n              :columns [[\&quot;volume\&quot;]\n                        [\&quot;x\&quot;]]}\n     :axis   {:x {:type \&quot;timeseries\&quot;\n                  :tick {:format \&quot;%M:%S\&quot;}}}})&quot; &quot;@(spline-graph*\n         {:id          \&quot;#minute-chart\&quot;\n          :label       \&quot;volume\&quot;\n          :format      \&quot;%M:%S\&quot;\n          :granularity \&quot;second\&quot;\n          :span        (time/minutes 1)})&quot; &quot;{:bindto \&quot;#minute-chart\&quot;\n     :data   {:x       \&quot;x\&quot;\n              :type    \&quot;spline\&quot;\n              :xFormat \&quot;%Y-%m-%dT%H:%M:%S\&quot;\n              :columns [[\&quot;volume\&quot;]\n                        [\&quot;x\&quot;]]}\n     :axis   {:x {:type \&quot;timeseries\&quot;\n                  :tick {:format \&quot;%M:%S\&quot;}}}}&quot; &quot;(let [[xs ...] [1 32]] \n  xs)&quot; &quot;(ns plotter.example\n  (:require cljsjs.d3\n            [plotter.core :refer [make-plotter =&gt;]]))&quot; &quot;(defn rgb-str [a b c]\n  (let [[r g b] (map #(mod % 256) [a b c])]\n    (str \&quot;rgb(\&quot;r\&quot;,\&quot;g\&quot;,\&quot;b\&quot;)\&quot;)))&quot; &quot;(defn props [c]\n  [[:select \&quot;#app\&quot;]\n   [:selectAll]\n   [:data [(clj-&gt;js (take 1000 (repeatedly #(rand-int 255)))) (fn [d] d)]]\n   [:enter]\n   [:append \&quot;div\&quot;]\n   [:attr [\&quot;class\&quot; \&quot;bar\&quot;]]\n   [:style [\&quot;background\&quot; c]]])&quot; &quot;(-&gt; js/d3\n    (.select \&quot;#app\&quot;)\n    (.text \&quot;yo\&quot;))&quot; &quot;(defn props [c]\n  [[:select \&quot;#app\&quot;]\n   [:selectAll]\n   [:data [(clj-&gt;js (take 1000 (repeatedly #(rand-int 255)))) (fn [d] d)]]\n   [:enter]\n   [:append \&quot;div\&quot;]\n   [:attr [\&quot;class\&quot; \&quot;bar\&quot;]]\n   [:style [\&quot;background\&quot; c]]\n   [:style [\&quot;height\&quot; 100]]\n   [:style [\&quot;width\&quot; 100]]])&quot; &quot;(doseq [f [(fn [d] (rgb-str d 0 0))\n           (fn [d] (rgb-str 0 d 0))\n           (fn [d] (rgb-str 0 0 d))]]\n  (=&gt; p (props f)))&quot; &quot;(defn prop? [[k v z :as x]]\n  (and (vector? k)  (keyword? k)))&quot; &quot;(defn prop? [[k v z :as x]]\n  (and #_(vector? k) (not z) (keyword? k)))&quot; &quot;(map prop?\n     [[:select \&quot;#app\&quot;]\n     [:append \&quot;div\&quot;]\n     [:attr [\&quot;id\&quot; \&quot;foo\&quot;]]\n     [:selectAll]\n     [:data (clj-&gt;js (vec (take 10000 (repeatedly #(rand-int 100))))) (fn [d] d)]\n     [:enter]\n     [:append \&quot;div\&quot;]\n     [:attr [\&quot;class\&quot; \&quot;bar\&quot;]]])&quot; &quot;(vector? [:select \&quot;#app\&quot;])&quot; &quot;(apply map prop?\n       [:select \&quot;#app\&quot;]\n       [:append \&quot;div\&quot;]\n       [:attr [\&quot;id\&quot; \&quot;foo\&quot;]]\n       [:selectAll]\n       [:data (clj-&gt;js (vec (take 10000 (repeatedly #(rand-int 100))))) (fn [d] d)]\n       [:enter]\n       [:append \&quot;div\&quot;]\n       [:attr [\&quot;class\&quot; \&quot;bar\&quot;]])&quot; &quot;(map prop?\n       [[:select \&quot;#app\&quot;]\n       [:append \&quot;div\&quot;]\n       [:attr [\&quot;id\&quot; \&quot;foo\&quot;]]\n       [:selectAll]\n       [:data (clj-&gt;js (vec (take 10000 (repeatedly #(rand-int 100))))) (fn [d] d)]\n       [:enter]\n       [:append \&quot;div\&quot;]\n       [:attr [\&quot;class\&quot; \&quot;bar\&quot;]]])&quot; &quot;(assoc [1 2] 0 12)&quot; &quot;(swap! =&gt; x\n       [[:select \&quot;#yop\&quot;]\n       [:selectAll]]\n       )&quot; &quot;(swap! x &gt;&gt;\n         [[:data (clj-&gt;js (vec (take 1000 (repeatedly #(rand-int 100))))) (fn [d] d)]\n          [:enter]\n          [:append \&quot;div\&quot;]\n          [:attr [\&quot;class\&quot; \&quot;bar\&quot;]]\n          (styles\n            {:background #(rgb-str % 0 0)\n             :height     10\n             :width      10\n             :display    \&quot;inline-block\&quot;})])&quot; &quot;(swap! x =&gt;\n       [[:select \&quot;#yop\&quot;]\n       [:selectAll]]\n       )&quot; &quot;(&gt;&gt; @x\n         [[:data (clj-&gt;js (vec (take 1000 (repeatedly #(rand-int 100))))) (fn [d] d)]\n          [:enter]\n          [:append \&quot;div\&quot;]\n          [:attr [\&quot;class\&quot; \&quot;bar\&quot;]]\n          (styles\n            {:background #(rgb-str % 0 0)\n             :height     10\n             :width      10\n             :display    \&quot;inline-block\&quot;})])&quot; &quot;(&gt;&gt; @x\n      [[:data (clj-&gt;js [1 2 3]) (fn [d] d)]\n       [:enter]\n       [:append \&quot;div\&quot;]\n       [:text identity]])&quot; &quot;(&gt;&gt; @x [:data [2 3 4]])&quot; &quot;(&gt;&gt; @x [[:data [2 3 4]]])&quot; &quot;(defn rgb-str [a b c]\n  (let [[r g b] (map #(mod % 256) [a b c])]\n    (str \&quot;rgb(\&quot; r \&quot;,\&quot; g \&quot;,\&quot; b \&quot;)\&quot;)))&quot; &quot;(def p (make-plotter js/d3))&quot; &quot;(swap! x &gt;&gt;\n      [[:data (clj-&gt;js [1 2 3]) (fn [d] d)]\n       [:enter]\n       [:append \&quot;div\&quot;]\n       [:text identity]])&quot; &quot;(&gt;&gt; @x [[:data (clj-&gt;js [2 3 4])]])&quot; &quot;(swap! x &gt;&gt;\n      [[:data (clj-&gt;js [2 3 4]) (fn [d] d)]\n       [:enter]\n       [:append \&quot;div\&quot;]\n       [:text identity]])&quot; &quot;(swap! x &gt;&gt;\n      [[:data (clj-&gt;js [5 6 7]) (fn [d] d)]\n       [:enter]\n       [:append \&quot;div\&quot;]\n       [:text identity]])&quot; &quot;(comment\n  (def x (atom (make-plotter js/d3)))\n  (def data (atom [1 2 3]))\n  (swap! x =&gt;\n         [[:select \&quot;#yop\&quot;]\n          [:selectAll]]\n         )\n\n  (swap! x &gt;&gt;\n      [[:data data (fn [d] @d)]\n       [:enter]\n       [:append \&quot;div\&quot;]\n       [:text identity]])\n\n  (&gt;&gt; @x [[:data (clj-&gt;js [2 3 4])]])\n\n  (&amp;=&gt; p\n       [:select \&quot;#app\&quot;]\n       [:append \&quot;div\&quot;]\n       [:attr [\&quot;id\&quot; \&quot;foo\&quot;]]\n       [:selectAll]\n       [:data (clj-&gt;js (vec (take 1000 (repeatedly #(rand-int 100))))) (fn [d] d)]\n       [:enter]\n       [:append \&quot;div\&quot;]\n       [:attr [\&quot;class\&quot; \&quot;bar\&quot;]]\n       (styles\n         {:background #(rgb-str % 0 0)\n          :height     10\n          :width      10\n          :display    \&quot;inline-block\&quot;})))&quot; &quot;(swap! x &gt;&gt;\n      [[:data data (fn [d] @d)]\n       [:enter]\n       [:append \&quot;div\&quot;]\n       [:text identity]])&quot; &quot;(def x (atom (make-plotter js/d3)))&quot; &quot;(def data (atom [1 2 3]))&quot; &quot;(swap! x =&gt;\n         [[:select \&quot;#yop\&quot;]\n          [:selectAll]]\n         )&quot; &quot;(swap! x &gt;&gt;\n      [[:data data (fn [d] (clj-&gt;js @d))]\n       [:enter]\n       [:append \&quot;div\&quot;]\n       [:text identity]])&quot; &quot;(&amp;=&gt; p\n       [:select \&quot;#app\&quot;]\n       [:append \&quot;div\&quot;]\n       [:attr [\&quot;id\&quot; \&quot;foo\&quot;]]\n       [:selectAll]\n       [:data (clj-&gt;js (vec (take 1000 (repeatedly #(rand-int 100))))) (fn [d] d)]\n       [:enter]\n       [:append \&quot;div\&quot;]\n       [:attr [\&quot;class\&quot; \&quot;bar\&quot;]]\n       (styles\n         {:background #(rgb-str % 0 0)\n          :height     10\n          :width      10\n          :display    \&quot;inline-block\&quot;}))&quot; &quot;(defn d3-coll [spec data]\n    (let [{:keys [id enter exit]} spec\n          p (cljs.core/atom (make-plotter js/d3))]\n      (reagent/create-class\n        {:component-did-mount\n         (fn [_]\n           (let [x (cljs.core/atom (&gt;&gt; @p [[:select (str \&quot;#\&quot; id)]\n                                           [:selectAll \&quot;div\&quot;]\n                                           [:data (clj-&gt;js @data)]]))]\n             (&gt;&gt; @x (cons [:enter] enter))\n             (&gt;&gt; @x (cons [:exit] (or exit [[:remove]])))))\n         :component-did-update\n         (fn [_]\n           (println \&quot;upd\&quot;)\n           (reset! p (&gt;&gt; (make-plotter js/d3)\n                         [[:select (str \&quot;#\&quot; id)]\n                          [:selectAll \&quot;div\&quot;]\n                          [:data (clj-&gt;js @data)]]))\n           (swap! p &gt;&gt; (cons [:enter] enter))\n           (swap! p &gt;&gt; (cons [:exit] (or exit [[:remove]]))))\n         :reagent-render\n         (fn []\n           @data\n           [:div {:id id}])})))&quot; &quot;(defn d3-coll [spec data]\n    (let [{:keys [id enter exit]} spec\n          p (cljs.core/atom (make-plotter js/d3))]\n      (reagent/create-class\n        {:component-did-mount\n         (fn [_]\n           (let [x (cljs.core/atom (&gt;&gt; @p [[:select (str \&quot;#\&quot; id)]\n                                           [:selectAll \&quot;div\&quot;]\n                                           [:data (clj-&gt;js @data)]]))]\n             (&gt;&gt; @x (cons [:enter] enter))\n             (&gt;&gt; @x (cons [:exit] (or exit [[:remove]])))))\n         :component-did-update\n         (fn [_]\n           (println \&quot;upd\&quot;)\n           (reset! p (&gt;&gt; (make-plotter js/d3)\n                         [[:select (str \&quot;#\&quot; id)]\n                          [:selectAll \&quot;div\&quot;]\n                          [:data (clj-&gt;js @data)]]))\n           (&gt;&gt; @p (cons [:enter] enter))\n           (&gt;&gt; @p (cons [:exit] (or exit [[:remove]]))))\n         :reagent-render\n         (fn []\n           @data\n           [:div {:id id}])})))&quot; &quot;(make-plotter js/d3)&quot; &quot;(ns plotter.example\n  (:require cljsjs.d3\n            [plotter.core :refer [make-plotter =&gt;]]\n            [reagent.core :as reagent :refer [atom]]))&quot; &quot;(defn d3-coll [spec data]\n    (let [{:keys [id enter exit]} spec\n          p (cljs.core/atom (make-plotter js/d3))\n          upd!\n          (fn []\n            (reset! p (&gt;&gt; (make-plotter js/d3)\n                          [[:select (str \&quot;#\&quot; id)]\n                           [:selectAll \&quot;div\&quot;]\n                           [:data (clj-&gt;js @data)]]))\n            (&gt;&gt; @p (cons [:enter] enter))\n            (&gt;&gt; @p (cons [:exit] (or exit [[:remove]]))))]\n      (reagent/create-class\n        {:component-did-mount upd!\n         :component-did-update\n         (fn [_]\n           (println \&quot;upd\&quot;)\n           (upd!))\n         :reagent-render\n         (fn []\n           @data\n           [:div {:id id}])})))&quot; &quot;(defn c1 []\n    (let [data (atom (vec (take 10 (repeatedly #(rand-int 100)))))]\n      [d3-coll\n       {:id    \&quot;yop\&quot;\n        :enter [[:append \&quot;div\&quot;]\n                [:on [\&quot;click\&quot; (fn [d i] (println \&quot;clicked\&quot; d i) (swap! data assoc i (rand-int 100)))]]\n                (styles\n                  {:background #(rgb-str % 0 0)\n                   :height     100\n                   :width      100\n                   :display    \&quot;inline-block\&quot;})]}\n       data]))&quot; &quot;(reagent/render-component\n    [c1]\n    (.getElementById js/document \&quot;app\&quot;))&quot; &quot;(ns strokes.test\n  (:require [strokes :refer [d3]]))&quot; &quot;(ns d3.word-cloud\n  (:require cljsjs.d3\n            [d3.utils :as u :refer [p &gt;&gt; *&gt; js&gt;]]))&quot; &quot;(defn wc2 [{:keys [selector width height rotate]}]\n  (let [fill (.category20 u/scale)\n        svg (*&gt; [:select selector]\n                [:append \&quot;svg\&quot;]\n                (u/attrs {:width width :height height})\n                [:append \&quot;g\&quot;]\n                (u/translate (/ width 2) (/ height 2)))\n        draw (fn [words]\n               (let [cl (&gt;&gt; svg\n                            [:selectAll \&quot;g text\&quot;]\n                            [:data [words #(.-text %) #_(js&gt; [(.-frequency %)(.-text %)])]])]\n                 (&gt;&gt; cl\n                     [:enter]\n                     [:append \&quot;text\&quot;]\n                     (u/styles {:font-family \&quot;Impact\&quot;\n                                :fill        #(fill %2)})\n                     (u/attrs {:text-anchor \&quot;middle\&quot;\n                               :font-size   1})\n                     [:text #(.-text %)])\n\n                 (&gt;&gt; cl\n                     [:transition]\n                     [:duration 600]\n                     (u/styles {:font-size    #(str (.-frequency %) \&quot;px\&quot;)\n                                :fill-opacity 1})\n                     [:attr [\&quot;transform\&quot; #(str \&quot;translate(\&quot; (.-x %) \&quot;,\&quot; (.-y %)\n                                               \&quot;) rotate(\&quot; (.-rotate %) \&quot;)\&quot;)]])\n                 (&gt;&gt; cl\n                     [:exit]\n                     [:transition]\n                     [:duration 200]\n                     [:style [\&quot;fill-opacity\&quot; 0.000001]]\n                     [:attr [\&quot;font-size\&quot; 1]]\n                     [:remove])))]\n    (fn [ws]\n      (.. (.. js/d3 -layout cloud)\n          (size (js&gt; [width height]))\n          (words (js&gt; ws))\n          (padding 5)\n          (rotate rotate)\n          (font \&quot;Impact\&quot;)\n          (fontSize (fn [d] (.-frequency d)))\n          (on \&quot;end\&quot; draw)\n          start))))&quot; &quot;(let [words [\&quot;You don't know about me without you have read a book called The Adventures of Tom Sawyer but that ain't no matter.\&quot;,\n                 \&quot;The boy with fair hair lowered himself down the last few feet of rock and began to pick his way toward the lagoon.\&quot;,\n                 \&quot;When Mr. Bilbo Baggins of Bag End announced that he would shortly be celebrating his eleventy-first birthday with a party of special magnificence, there was much talk and excitement in Hobbiton.\&quot;,\n                 \&quot;It was inevitable: the scent of bitter almonds always reminded him of the fate of unrequited love.\&quot;]\n          wgen #(mapv (fn [t] {:text      t\n                               :frequency (+ 10 (rand-nth [10 30 50]))})\n                      (clojure.string/split (rand-nth words) #\&quot; \&quot;))\n          wc (wc2 {:selector \&quot;#app\&quot;\n                   :width 500\n                   :height 500\n                   :rotate (fn [] (rand-nth [0 90 -90]))})]\n      (js/setInterval #(wc (wgen)) 2000))&quot; &quot;(defn get-last-day-words []\n  (request {:section      \&quot;statistics/v1/wordcloud\&quot;\n            :query-params {\&quot;limit\&quot;    50\n                           \&quot;kind\&quot;     \&quot;hashtags\&quot;\n                           \&quot;timeFrom\&quot; (time-&gt;str (time/minus (time/now) (time/days 1)))}\n            :callback     (fn [x] (println (map (fn [[k v]] {:text (name k)\n                                                             :frequency (second (first (:messages v)))})\n                                                (-&gt; x :body :data))))}))&quot; &quot;(defn wc-request [kind delta-t]\n  (request {:section      \&quot;statistics/v1/wordcloud\&quot;\n            :query-params {\&quot;limit\&quot;    50\n                           \&quot;kind\&quot;     kind\n                           \&quot;timeFrom\&quot; (time-&gt;str (time/minus (time/now) delta-t))}\n            :callback     (fn [x] (println (map (fn [[k v]] {:text (name k)\n                                                             :frequency (second (first (:messages v)))})\n                                                (-&gt; x :body :data))))}))&quot; &quot;(defn get-last-day-words []\n  (wc-request \&quot;hashtag\&quot; (time/days 1)))&quot; &quot;(defn wc-request [kind delta-t]\n  (request {:section      \&quot;statistics/v1/wordcloud\&quot;\n            :query-params {\&quot;limit\&quot;    50\n                           \&quot;kind\&quot;     kind\n                           \&quot;timeFrom\&quot; (time-&gt;str (time/minus (time/now) delta-t))}\n            :callback     (fn [x] \n                            (println (-&gt; x :body :data)) \n                            #_(println (map (fn [[k v]] {:text (name k)\n                                                             :frequency (second (first (:messages v)))})\n                                                (-&gt; x :body :data))))}))&quot; &quot;(time/minus (time/now) delta-t)&quot; &quot;(time/minus (time/now) (time/days 1))&quot; &quot;(time-&gt;str (time/minus (time/now) (time/days 1)))&quot; &quot;(defn wc-request [kind delta-t]\n  (request {:section  \&quot;statistics/v1/wordcloud\&quot;\n            :params   {\&quot;limit\&quot;    50\n                       \&quot;kind\&quot;     kind\n                       \&quot;timeFrom\&quot; (time-&gt;str (time/minus (time/now) delta-t))}\n            :callback (fn [x]\n                        (println (-&gt; x :body :data))\n                        #_(println (map (fn [[k v]] {:text      (name k)\n                                                     :frequency (second (first (:messages v)))})\n                                        (-&gt; x :body :data))))}))&quot; &quot;(defn get-last-day-htags []\n  (wc-request \&quot;hashtags\&quot; (time/days 1)))&quot; &quot;(defn get-last-day-words []\n  (wc-request \&quot;tokens\&quot; (time/days 1)))&quot; &quot;(get-last-day-words)&quot; &quot;(get-last-day-htags)&quot; &quot;(wc @cloud-data)&quot; &quot;(let [wc (word-cloud {:selector \&quot;#app\&quot;\n                 :width 500\n                 :height 500\n                 :rotate (fn [] (rand-nth [0 90 -90]))})]\n    (wc @cloud-data))&quot; &quot;(let [wc (word-cloud \n             {:selector \&quot;#app\&quot;\n              :width 500\n              :height 500\n              :rotate (fn [] (rand-nth [0 90 -90]))})]\n    (wc @cloud-data))&quot; &quot;(clear-svg!)&quot; &quot;(let [words [\&quot;You don't know about me without you have read a book called The Adventures of Tom Sawyer but that ain't no matter.\&quot;,\n                 \&quot;The boy with fair hair lowered himself down the last few feet of rock and began to pick his way toward the lagoon.\&quot;,\n                 \&quot;When Mr. Bilbo Baggins of Bag End announced that he would shortly be celebrating his eleventy-first birthday with a party of special magnificence, there was much talk and excitement in Hobbiton.\&quot;,\n                 \&quot;It was inevitable: the scent of bitter almonds always reminded him of the fate of unrequited love.\&quot;]\n          wgen #(mapv (fn [t] {:text      t\n                               :frequency (+ 10 (rand-nth [10 30 50]))})\n                      (clojure.string/split (rand-nth words) #\&quot; \&quot;))\n          wc (word-cloud {:selector \&quot;#app\&quot;\n                   :width 500\n                   :height 500\n                   :rotate (fn [] (rand-nth [0 90 -90]))})]\n      (js/setInterval #(wc (wgen)) 2000))&quot; &quot;(let [wc (word-cloud\n             {:selector \&quot;#app\&quot;\n              :width 500\n              :height 500\n              :rotate (fn [] (rand-nth [0 90 -90]))})]\n    (wc @cloud-data))&quot; &quot;(let [wc (word-cloud\n             {:selector \&quot;#app\&quot;\n              :width 500\n              :height 500\n              :rotate (fn [] (rand-nth [0 90 -90]))})]\n    (wc (mapv (fn [x] (assoc x :frequency 15)) @cloud-data)))&quot; &quot;(let [wc (word-cloud\n             {:selector \&quot;#app\&quot;\n              :width 500\n              :height 500\n              :rotate (fn [] (rand-nth [0 90 -90]))\n              :font-size-range [20 50]})]\n    (wc (mapv (fn [x] (assoc x :frequency 15)) @cloud-data)))&quot; &quot;(.. u/scale linear (domain (js&gt; [0 1]))(range (js&gt; [10 50])))&quot; &quot;(let [s (.. u/scale linear (domain (js&gt; [0 1]))(range (js&gt; [10 50])))]\n      [(s 0) (s 1) (s 0.5)])&quot; &quot;(let [s (.. u/scale linear (domain (js&gt; [0 1 0.3]))(range (js&gt; [10 50])))]\n      [(s 0) (s 1) (s 0.5)])&quot; &quot;(let [words [\&quot;You don't know about me without you have read a book called The Adventures of Tom Sawyer but that ain't no matter.\&quot;,\n                 \&quot;The boy with fair hair lowered himself down the last few feet of rock and began to pick his way toward the lagoon.\&quot;,\n                 \&quot;When Mr. Bilbo Baggins of Bag End announced that he would shortly be celebrating his eleventy-first birthday with a party of special magnificence, there was much talk and excitement in Hobbiton.\&quot;,\n                 \&quot;It was inevitable: the scent of bitter almonds always reminded him of the fate of unrequited love.\&quot;]\n          wgen #(mapv (fn [t] {:text      t\n                               :frequency (+ 10 (rand-nth [10 30 50]))})\n                      (clojure.string/split (rand-nth words) #\&quot; \&quot;))\n          wc (word-cloud {:selector        \&quot;#app\&quot;\n                          :width           500\n                          :height          500\n                          :font-size-range [10 50]\n                          :rotate          (fn [] (rand-nth [0 90 -90]))})]\n      (js/setInterval #(wc (wgen)) 2000))&quot; &quot;(let [words [\&quot;You don't know about me without you have read a book called The Adventures of Tom Sawyer but that ain't no matter.\&quot;,\n                 \&quot;The boy with fair hair lowered himself down the last few feet of rock and began to pick his way toward the lagoon.\&quot;,\n                 \&quot;When Mr. Bilbo Baggins of Bag End announced that he would shortly be celebrating his eleventy-first birthday with a party of special magnificence, there was much talk and excitement in Hobbiton.\&quot;,\n                 \&quot;It was inevitable: the scent of bitter almonds always reminded him of the fate of unrequited love.\&quot;]\n          wgen #(mapv (fn [t] {:text      t\n                               :frequency (+ 10 (rand-nth [10 30 50]))})\n                      (clojure.string/split (rand-nth words) #\&quot; \&quot;))\n          wc (word-cloud {:selector        \&quot;#app\&quot;\n                          :width           500\n                          :height          500\n                          :font-size-range [10 20]\n                          :rotate          (fn [] (rand-nth [0 90 -90]))})]\n      (js/setInterval #(wc (wgen)) 2000))&quot; &quot;(get-last-day-htags cloud-data)&quot; &quot;(let [wc (word-cloud\n             {:selector \&quot;#app\&quot;\n              :width 500\n              :height 500\n              :rotate (fn [] (rand-nth [0 90 -90]))\n              :font-size-range [20 50]})]\n    (wc @cloud-data))&quot; &quot;(let [rot-scaler\n        (.. u/scale linear (domain (js&gt; [0 1])) (range (js&gt; [-10 10])))\n        wc\n        (word-cloud\n          {:selector        \&quot;#app\&quot;\n           :width           500\n           :height          500\n           :rotate          (fn [] (rot-scaler (rand)))\n           :font-size-range [20 50]})]\n    (wc @cloud-data))&quot; &quot;(.. js/d3 scale linear (domain (js&gt; [0 1])) (range (js&gt; [-10 10])))&quot; &quot;(.. js/d3 -scale linear (domain (js&gt; [0 1])) (range (js&gt; [-10 10])))&quot; &quot;(let [rot-scaler\n        (.. d3u/scale linear (domain (js&gt; [0 1])) (range (js&gt; [-10 10])))\n        wc\n        (word-cloud\n          {:selector        \&quot;#app\&quot;\n           :width           500\n           :height          500\n           :rotate          (fn [] (rot-scaler (rand)))\n           :font-size-range [20 50]})]\n    (wc @cloud-data))&quot; &quot;(def cloud-data (cljs.core/atom nil))&quot; &quot;(get-last-day-words cloud-data)&quot; &quot;(println @cloud-data)&quot; &quot;(let [rot-scaler\n        (.. d3u/scale linear (domain #js [0 1]) (range #js[-10 10]))\n        wc\n        (word-cloud\n          {:selector        \&quot;#app\&quot;\n           :width           500\n           :height          500\n           :rotate          (fn [] (rot-scaler (rand)))\n           :font-size-range [20 50]})]\n    (wc @cloud-data))&quot; &quot;(wc-messages {:limit 3 :span (time/days 1) :kind \&quot;hashtags\&quot; :text \&quot;GreysAnatomy\&quot;} (atom nil))&quot; &quot;(get-wc-messages {:limit 3 :span (time/days 1) :kind \&quot;hashtags\&quot; :text \&quot;GreysAnatomy\&quot;})&quot; &quot;(def time/now 1)&quot; &quot;(defn time-now [] (ago (time/days 1)))&quot;], :remote []}}</component>
</project>